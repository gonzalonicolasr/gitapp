"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var request = require("request");
var cheerio = require("cheerio");
var yaml = require("js-yaml");
var RE_HREF_SCRAPE = /^\/([^\/]+)\/([^\/]+)$/;
var RE_DIGITS = /\d+/;
var RE_COMMA = /,/g;
var Scraper = (function () {
    function Scraper(config) {
        this.config = config || {};
        if (this.config.useGzip === undefined) {
            this.config.useGzip = true;
        }
        this.cache = null;
    }
    Scraper.prototype.fetchRequest = function (opts) {
        if (this.config.proxy) {
            opts.proxy = this.config.proxy;
        }
        if (this.config.useGzip) {
            opts.gzip = true;
        }
        return new Promise(function (resolve, reject) {
            request(opts, function (err, res, body) {
                if (err) {
                    reject(err);
                    return;
                }
                if (res.statusCode !== 200) {
                    reject(new Error('Invalid status: ' + res.statusCode));
                    return;
                }
                resolve(body);
            });
        });
    };
    Scraper.prototype.fetchTrendPage = function (lang) {
        var opts = {
            url: 'https://github.com/trending',
        };
        if (lang) {
            opts.url += '?l=' + lang;
        }
        return this.fetchRequest(opts);
    };
    Scraper.prototype.scrapeTrendingReposFullInfo = function (lang_name) {
        return this.fetchTrendPage(lang_name).then(function (html) {
            var results = [];
            var dom = cheerio.load(html);
            var items = dom('.repo-list li');
            var _loop_1 = function (i) {
                var li = items[i];
                var result = {
                    index: i,
                    name: null,
                    owner: null,
                    description: null,
                    language: null,
                    langColor: null,
                    allStars: null,
                    todaysStars: null,
                    forks: null,
                };
                var domElem = dom(li);
                var a = domElem.find('h3 a')[0];
                var href = a.attribs.href;
                var match = href.match(RE_HREF_SCRAPE);
                if (match) {
                    result.owner = match[1];
                    result.name = match[2];
                }
                var p = domElem.find('p')[0];
                if (p) {
                    result.description = p.children[0].data;
                }
                var lang = domElem.find('[itemprop="programmingLanguage"]')[0];
                if (lang) {
                    result.language = lang.children[0].data;
                }
                var langColor = domElem.find('.repo-language-color')[0];
                if (langColor) {
                    var style = langColor.attribs.style;
                    if (style.indexOf('background-color:#') === 0) {
                        result.langColor = style.slice('background-color:'.length, -1);
                    }
                }
                var counts = domElem.find('.muted-link.d-inline-block.mr-3');
                var allStars = counts[0];
                if (allStars) {
                    result.allStars = parseInt(allStars.children[2].data.replace(RE_COMMA, ''), 10);
                }
                var forks = counts[1];
                if (forks) {
                    result.forks = parseInt(allStars.children[2].data.replace(RE_COMMA, ''), 10);
                }
                var todaysStars = domElem.find('.f6.text-gray.mt-2 > span:last-child')[0];
                if (todaysStars) {
                    var numStars = todaysStars.children[2].data.replace(RE_COMMA, '').match(RE_DIGITS);
                    if (numStars !== null) {
                        result.todaysStars = parseInt(numStars[0], 10);
                    }
                }
                var keys = Object.keys(result);
                keys.forEach(function (k) {
                    var v = result[k];
                    if (typeof v === 'string') {
                        result[k] = v.trim();
                    }
                });
                results.push(result);
            };
            for (var i = 0; i < items.length; i++) {
                _loop_1(i);
            }
            return results;
        });
    };
    Scraper.prototype.scrapeTrendingRepos = function (lang) {
        return this.fetchTrendPage(lang).then(function (html) {
            var repos = [];
            var dom = cheerio.load(html);
            var items = dom('.repo-list li');
            for (var i = 0; i < items.length; i++) {
                var li = items[i];
                var a = dom(li).find('h3 a')[0];
                var href = a.attribs.href;
                var match = href.match(RE_HREF_SCRAPE);
                if (match) {
                    repos.push({
                        owner: match[1],
                        name: match[2],
                    });
                }
            }
            return repos;
        });
    };
    Scraper.prototype.fetchLanguageYAML = function () {
        var _this = this;
        if (this.cache !== null) {
            return Promise.resolve(this.cache);
        }
        var opts = {
            url: 'https://raw.githubusercontent.com/github/linguist/master/lib/linguist/languages.yml',
        };
        return this.fetchRequest(opts).then(function (body) {
            var langs = yaml.safeLoad(body);
            _this.cache = langs;
            return langs;
        });
    };
    Scraper.prototype.scrapeLanguageColors = function () {
        return this.fetchLanguageYAML().then(function (langs) {
            var result = {};
            for (var name_1 in langs) {
                var lang = langs[name_1];
                if (!lang.color) {
                    continue;
                }
                result[name_1.toLowerCase()] = lang.color;
                if (lang.aliases !== undefined) {
                    for (var _i = 0, _a = lang.aliases; _i < _a.length; _i++) {
                        var alias = _a[_i];
                        result[alias.toLowerCase()] = lang.color;
                    }
                }
            }
            return result;
        });
    };
    Scraper.prototype.scrapeLanguageNames = function () {
        return this.fetchLanguageYAML().then(function (langs) {
            var result = [];
            for (var _i = 0, _a = Object.keys(langs); _i < _a.length; _i++) {
                var name_2 = _a[_i];
                result.push(name_2);
                var lang = langs[name_2];
                if (!lang.color) {
                    continue;
                }
                if (lang.aliases !== undefined) {
                    Array.prototype.push.apply(result, lang.aliases);
                }
            }
            return result;
        });
    };
    return Scraper;
}());
exports.Scraper = Scraper;
var Client = (function () {
    function Client(config, token) {
        this.scraper = new Scraper(config);
        this.config = config || {};
        this.config.token = token || (config || {}).token || null;
        if (token !== undefined) {
            console.warn('github-trend: The second parameter of constructor of Trending.Client class is deprecated.' +
                ' Please use token property of the config passed to the first parameter.');
        }
    }
    Client.prototype.fetchGetRepoAPI = function (repo) {
        var headers = {
            'User-Agent': 'request',
            Accept: 'application/vnd.github.v3+json',
        };
        if (this.config.token) {
            headers.Authorization = 'token ' + this.config.token;
        }
        var opts = {
            url: "https://api.github.com/repos/" + repo.owner + "/" + repo.name,
            headers: headers,
        };
        return this.scraper.fetchRequest(opts).then(function (body) { return JSON.parse(body); });
    };
    Client.prototype.fetchTrending = function (lang) {
        var _this = this;
        if (this.config.useCodeHubInternalAPI) {
            var url = 'http://trending.codehub-app.com/v2/trending';
            if (lang !== '' && lang !== 'all') {
                url += '?language=' + lang;
            }
            return this.scraper.fetchRequest({ url: url }).then(function (text) { return JSON.parse(text); });
        }
        return this.scraper.scrapeTrendingRepos(lang).then(function (repos) {
            return Promise.all(repos.map(function (r) { return _this.fetchGetRepoAPI(r); }));
        });
    };
    Client.prototype.fetchAppendingReadme = function (repo) {
        var readme_url = repo.html_url + "/blob/" + repo.default_branch + "/README.md";
        var opts = {
            url: readme_url,
            method: 'HEAD',
        };
        return this.scraper
            .fetchRequest(opts)
            .then(function () {
            repo.readme_url = readme_url;
            return repo;
        })
            .catch(function () { return repo; });
    };
    Client.prototype.fetchTrendingWithReadme = function (lang) {
        var _this = this;
        return this.fetchTrending(lang).then(function (repos) {
            return Promise.all(repos.map(function (r) { return _this.fetchAppendingReadme(r); }));
        });
    };
    Client.prototype.fetchTrendingsWithReadme = function (langs) {
        var _this = this;
        return Promise.all(langs.map(function (l) { return _this.fetchTrendingWithReadme(l); })).then(function (trendings) {
            var result = {};
            langs.forEach(function (lang, idx) {
                result[lang] = trendings[idx];
            });
            return result;
        });
    };
    Client.prototype.fetchTrendings = function (langs) {
        var _this = this;
        return Promise.all(langs.map(function (l) { return _this.fetchTrending(l); })).then(function (trendings) {
            var result = {};
            langs.forEach(function (lang, idx) {
                result[lang] = trendings[idx];
            });
            return result;
        });
    };
    return Client;
}());
exports.Client = Client;
//# sourceMappingURL=main.js.map